<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IoTApi</name>
    </assembly>
    <members>
        <member name="T:Daenet.Iot.IIotApi">
            <summary>
            Interface which defines operation which IoT transports have to implement.
            </summary>
        </member>
        <member name="M:Daenet.Iot.IIotApi.Open(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Performs initialization of transport implementation.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="P:Daenet.Iot.IIotApi.Name">
            <summary>
            Gets the name of transport library.
            </summary>
        </member>
        <member name="M:Daenet.Iot.IIotApi.OnMessage(System.Func{System.Object,System.Boolean},System.Threading.CancellationToken,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Invoked by transport when a message is received.
            </summary>
            <param name="onReceiveMsg">The method which is invoked when the message is received.
            Return value shoul d be set on true if message needs to be acknowledged.</param>
            <param name="args">List of arguments which can be internally used by transports.
            Because transports will use different argumens
            this parameter provides a generic dictionary of arguments.</param>
        </member>
        <member name="M:Daenet.Iot.IIotApi.ReceiveAsync(System.Func{System.Object,System.Boolean},System.Func{System.Exception,System.Boolean},System.Int32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Receievs the message.
            </summary>
            <param name="onSuccess">On success delegate method (promise).</param>
            <param name="onError">>On error delegate method (promise).</param>
            <param name="autoComplete">True if the message should be completed automatically.
            In that case it is completted as successful after successful invoke of onSuccess callback function or it 
            is completed as failed if onSuccess callback failes.
            If this is set on NULL, <see cref="!:AcknowledgeReceivedMessage" /> should explicitelly be called.
            If some APIs do not support message completion, this parameter can be ignored.</param>
            <param name="args">List of arguments which can be internally used by transports.
            Because transports will use different argumens
            this parameter provides a generic dictionary of arguments.</param>
            <returns>List of messages.</returns>
        </member>
        <member name="M:Daenet.Iot.IIotApi.RegisterAcknowledge(System.Action{System.String,System.Exception})">
            <summary>
            After the message is receieved the business code, 
            SHOULD/MUST/CAN (depends on concrete implementation) invoke this method to acknowledge receiving of the message. 
            If the transport does not support acknowledge of the message, then implementation should 
            return without any action.
            </summary>
            <param name="msg">Message, which should be acknowledged.</param>
            <param name="error">If no error ocurred this MUST BE null. If no error ocurred, message will be acknowledged (completed)
            as successful.
            Otherwise this argument is instance of exception which has ocurred. In that case message is acknowledged as failed (abandoned)
            and can be resent again. 
            Exact behavior depends on the concrete implementation.</param>
            <param name="args">List of arguments which can be internally used by transports.
            Because transports will use different argumens
            this parameter provides a generic dictionary of arguments.</param>
        </member>
        <member name="M:Daenet.Iot.IIotApi.SendAsync(System.Object,System.Action{System.Collections.Generic.IList{System.Object}},System.Action{System.Collections.Generic.IList{System.Object},System.Exception},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Sends the message to service or device. 
            </summary>
            <param name="sensorMessage">The message to be sent.</param>
            <param name="onSuccess">On success delegate method (promise).</param>
            <param name="onError">>On error delegate method (promise).</param>
            <param name="args">List of arguments which can be internally used by transports.
            Because transports will use different argumens
            this parameter provides a generic dictionary of arguments.</param>
            <returns>Task</returns>
            <remarks>
            Note, the exact behavior of sending of the
            message is defined by concrete implementation.
            </remarks>
        </member>
        <member name="M:Daenet.Iot.IIotApi.SendAsync(System.Collections.Generic.IList{System.Object},System.Action{System.Collections.Generic.IList{System.Object}},System.Action{System.Collections.Generic.IList{System.Object},System.Exception},System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Sends the message to service or device. 
            </summary>
            <param name="sensorMessages">Batch pof messages.</param>
            <param name="onSuccess">On success delegate method (promise).</param>
            <param name="onError">>On error delegate method (promise).</param>
            <param name="args">List of arguments which can be internally used by transports.
            Because transports will use different argumens
            this parameter provides a generic dictionary of arguments.</param>
            <returns>Task</returns>
            <remarks>
            Note, the exact behavior of sending of the
            message is defined by concrete implementation.
            </remarks>
        </member>
        <member name="T:Daenet.Iot.IotMockDevice">
            <summary>
            Mock device which supports specific protocol.This device is very useful for testing of protocols.
            SCENARIO 'Send Command to device': You can send commands to device.
            For every received command, device will trace out the message id. If you want to trace out some other 
            part of the message please override method <see cref="M:Daenet.Iot.IotMockDevice.ReadMessage(System.Object)"/>.
            SCENARIO 'Send Telemetry Data'.
            If you want to enable device for sending of telemetry data you can send a message with property 'Start'
            of type int. This property will set in millisecopnds how often the device shoud send telemetry data.
            If you send a message with property 'Stop' (any type and any value) device will stop sending of telemetry data.
            </summary>
        </member>
        <member name="M:Daenet.Iot.IotMockDevice.ReadMessage(System.Object)">
            <summary>
            You can override this method if you want to trace out any other part of the message.
            By defaulot this method returns message identifier.
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:Daenet.Iot.Message.#ctor(System.Object)">
            <summary>
            Creates the message.
            </summary>
            <param name="messageBody">The body of the message.</param>
        </member>
    </members>
</doc>
